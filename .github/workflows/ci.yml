name: ci

on:
  pull_request:
    branches:
      - trunk

jobs:
  ping:
    permissions:
      contents: write
    strategy:
      max-parallel: 1
      matrix:
        repo:
          - toolbox
          - vulkan.zig
          - wayland.zig
          - X11.zig
          - glfw.zig
          - cimgui.zig
          - spirv.zig
          - glslang.zig
          - shaderc.zig
          - spaceporn
          - spaceporn-dep-action-env
          - spaceporn-dep-action-bot
          - spaceporn-dep-action-ci
          - spaceporn-dep-action-cd-ping
          - spaceporn-dep-action-cd-pong
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        repository: "${{ github.repository_owner }}/${{ github.event.repository.name }}"

    - name: Search current tag selected by user
      id: used
      env:
        DEPENDENCY: "${{ github.repository_owner }}/${{ matrix.repo }}"
      shell: bash
      run: |
        tag="$(grep -h -o -R "${DEPENDENCY}@v\S\+" | sed "s#^${DEPENDENCY}@##" | sort -u || :)"
        printf 'tag=%s\n' "${tag}" >> "${GITHUB_OUTPUT}"

    - uses: actions/checkout@v4
      with:
        repository: "${{ github.repository_owner }}/${{ matrix.repo }}"
        fetch-depth: 0
        fetch-tags: true

    - name: Prepare dump
      id: prepare
      env:
        USED: "${{ steps.used.outputs.tag }}"
      shell: bash
      run: |
        tags="$(git tag --points-at "$(git describe --tags --abbrev=0 2> /dev/null)" 2> /dev/null | wc -l || :)"
        if [[ -z "${tags}" || "${tags}" == '0' ]]; then tag='0.0.0'
        elif [[ "${tags}" == '1' ]]; then tag="$(git describe --tags --abbrev=0)"; fi
        git show-ref --tags "${tag:-"${USED}"}" --quiet && git checkout "${tag:-"${USED}"}"
        printf 'tag=%s\n' "${tag:-"${USED}"}" >> "${GITHUB_OUTPUT}"

    - uses: actions/checkout@v4

    - name: Keep the last run ID in memory
      id: previous_run
      env:
        FIELD: 'databaseId'
        GH_TOKEN: "${{ github.token }}"
        WORKFLOW_NAME: 'dump'
      shell: bash
      run: |
        id="$(gh run list -w "${WORKFLOW_NAME}" -L 1 --json "${FIELD}" | jq ".[] | .${FIELD}")"
        printf 'id=%s\n' "${id}" >> "${GITHUB_OUTPUT}"

    - uses: ./
      with:
        repository_name: "${{ matrix.repo }}"
        user: "${{ github.event.repository.name }}"
        tag: "${{ steps.prepare.outputs.tag }}"
        token: "${{ secrets.PAT }}"

    - uses: actions/checkout@v4

    - name: Wait for the new run to finish
      id: current_run
      env:
        GH_TOKEN: "${{ github.token }}"
        LIST_FIELD: 'databaseId'
        PREVIOUS_RUN_ID: "${{ steps.previous_run.outputs.id }}"
        VIEW_FIELD: 'conclusion'
      shell: bash
      run: |
        id="${PREVIOUS_RUN_ID}"
        while [[ "${id}" == "${PREVIOUS_RUN_ID}" ]]
        do
          sleep 0.1
          id="$(gh run list -w "${WORKFLOW_NAME}" -L 1 --json "${LIST_FIELD}" | jq ".[] | .${LIST_FIELD}")"
        done
        while [[ "${conclusion:-}" != 'success' && "${conclusion:-}" != 'failure' ]]
        do
          sleep 0.1
          conclusion="$(gh run view --json "${VIEW_FIELD}" "${id}" | jq -r ".${VIEW_FIELD}")"
        done
        printf 'result=%s\n' "${conclusion}" >> "${GITHUB_OUTPUT}"

    - name: Fail if the dump failed
      env:
        RESULT: "${{ steps.current_run.outputs.result }}"
      shell: bash
      run: |
        [[ "${RESULT}" == 'success' ]]
